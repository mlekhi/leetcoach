{"ast":null,"code":"var _jsxFileName = \"/Users/madhavmalik/VSC Projects/leetcoach/client/src/pages/TranscriptionPage.js\",\n  _s = $RefreshSig$();\n// src/pages/TranscriptionPage.js\nimport React, { useState, useEffect } from 'react';\nimport Groq from 'groq-sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groq = new Groq({\n  apiKey: process.env.REACT_APP_GROQ_API_KEY,\n  dangerouslyAllowBrowser: true // Allow browser usage (use cautiously)\n});\nconst TranscriptionPage = () => {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [audioStream, setAudioStream] = useState(null);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      setAudioStream(stream);\n      handleAudioStream(stream);\n    }).catch(err => console.error('Error accessing audio stream:', err));\n    return () => {\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [audioStream]);\n  const handleAudioStream = async stream => {\n    const mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.start();\n    mediaRecorder.ondataavailable = async event => {\n      if (event.data.size > 0) {\n        const formData = new FormData();\n        formData.append('file', event.data, 'audio.webm');\n        try {\n          const response = await fetch('https://api.groq.com/openai/v1/audio/transcriptions', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${process.env.REACT_APP_GROQ_API_KEY}`\n            },\n            body: formData\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const transcription = await response.json();\n          setTranscription(transcription.text);\n        } catch (error) {\n          console.error('Error transcribing audio:', error);\n        }\n      }\n    };\n    mediaRecorder.onerror = error => {\n      console.error('MediaRecorder error:', error);\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Transcription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Transcribed Text: \", transcription]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(TranscriptionPage, \"+rQn6x6ZVc3R+Yr54rOlVnKCmyg=\");\n_c = TranscriptionPage;\nexport default TranscriptionPage;\nvar _c;\n$RefreshReg$(_c, \"TranscriptionPage\");","map":{"version":3,"names":["React","useState","useEffect","Groq","jsxDEV","_jsxDEV","groq","apiKey","process","env","REACT_APP_GROQ_API_KEY","dangerouslyAllowBrowser","TranscriptionPage","_s","transcription","setTranscription","audioStream","setAudioStream","navigator","mediaDevices","getUserMedia","audio","then","stream","handleAudioStream","catch","err","console","error","getTracks","forEach","track","stop","mediaRecorder","MediaRecorder","start","ondataavailable","event","data","size","formData","FormData","append","response","fetch","method","headers","body","ok","Error","status","json","text","onerror","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/madhavmalik/VSC Projects/leetcoach/client/src/pages/TranscriptionPage.js"],"sourcesContent":["// src/pages/TranscriptionPage.js\nimport React, { useState, useEffect } from 'react';\nimport Groq from 'groq-sdk';\n\nconst groq = new Groq({\n  apiKey: process.env.REACT_APP_GROQ_API_KEY,\n  dangerouslyAllowBrowser: true, // Allow browser usage (use cautiously)\n});\n\nconst TranscriptionPage = () => {\n  const [transcription, setTranscription] = useState('');\n  const [audioStream, setAudioStream] = useState(null);\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n        setAudioStream(stream);\n        handleAudioStream(stream);\n      })\n      .catch(err => console.error('Error accessing audio stream:', err));\n\n    return () => {\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [audioStream]);\n\n  const handleAudioStream = async (stream) => {\n    const mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.start();\n\n    mediaRecorder.ondataavailable = async (event) => {\n      if (event.data.size > 0) {\n        const formData = new FormData();\n        formData.append('file', event.data, 'audio.webm');\n\n        try {\n          const response = await fetch('https://api.groq.com/openai/v1/audio/transcriptions', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${process.env.REACT_APP_GROQ_API_KEY}`,\n            },\n            body: formData,\n          });\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const transcription = await response.json();\n          setTranscription(transcription.text);\n        } catch (error) {\n          console.error('Error transcribing audio:', error);\n        }\n      }\n    };\n\n    mediaRecorder.onerror = (error) => {\n      console.error('MediaRecorder error:', error);\n    };\n  };\n\n  return (\n    <div>\n      <h1>Real-Time Transcription</h1>\n      <p>Transcribed Text: {transcription}</p>\n    </div>\n  );\n};\n\nexport default TranscriptionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}