{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _a;\nimport * as Errors from \"./error.mjs\";\nimport * as Uploads from \"./uploads.mjs\";\nimport * as Core from \"./core.mjs\";\nimport * as API from \"./resources/index.mjs\";\n/**\n * API Client for interfacing with the Groq API.\n */\nexport class Groq extends Core.APIClient {\n  /**\n   * API Client for interfacing with the Groq API.\n   *\n   * @param {string | undefined} [opts.apiKey=process.env['GROQ_API_KEY'] ?? undefined]\n   * @param {string} [opts.baseURL=process.env['GROQ_BASE_URL'] ?? https://api.groq.com] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = Core.readEnv('GROQ_BASE_URL'),\n    apiKey = Core.readEnv('GROQ_API_KEY'),\n    ...opts\n  } = {}) {\n    if (apiKey === undefined) {\n      throw new Errors.GroqError(\"The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' }).\");\n    }\n    const options = {\n      apiKey,\n      ...opts,\n      baseURL: baseURL || `https://api.groq.com`\n    };\n    if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\n      throw new Errors.GroqError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew Groq({ apiKey, dangerouslyAllowBrowser: true })\");\n    }\n    super({\n      baseURL: options.baseURL,\n      timeout: options.timeout ?? 60000 /* 1 minute */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch\n    });\n    this.completions = new API.Completions(this);\n    this.chat = new API.Chat(this);\n    this.embeddings = new API.Embeddings(this);\n    this.audio = new API.Audio(this);\n    this.models = new API.Models(this);\n    this._options = options;\n    this.apiKey = apiKey;\n  }\n  defaultQuery() {\n    return this._options.defaultQuery;\n  }\n  defaultHeaders(opts) {\n    return {\n      ...super.defaultHeaders(opts),\n      ...this._options.defaultHeaders\n    };\n  }\n  authHeaders(opts) {\n    return {\n      Authorization: `Bearer ${this.apiKey}`\n    };\n  }\n}\n_a = Groq;\nGroq.Groq = _a;\nGroq.DEFAULT_TIMEOUT = 60000; // 1 minute\nGroq.GroqError = Errors.GroqError;\nGroq.APIError = Errors.APIError;\nGroq.APIConnectionError = Errors.APIConnectionError;\nGroq.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\nGroq.APIUserAbortError = Errors.APIUserAbortError;\nGroq.NotFoundError = Errors.NotFoundError;\nGroq.ConflictError = Errors.ConflictError;\nGroq.RateLimitError = Errors.RateLimitError;\nGroq.BadRequestError = Errors.BadRequestError;\nGroq.AuthenticationError = Errors.AuthenticationError;\nGroq.InternalServerError = Errors.InternalServerError;\nGroq.PermissionDeniedError = Errors.PermissionDeniedError;\nGroq.UnprocessableEntityError = Errors.UnprocessableEntityError;\nGroq.toFile = Uploads.toFile;\nGroq.fileFromPath = Uploads.fileFromPath;\nexport const {\n  GroqError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BadRequestError,\n  AuthenticationError,\n  InternalServerError,\n  PermissionDeniedError,\n  UnprocessableEntityError\n} = Errors;\nexport var toFile = Uploads.toFile;\nexport var fileFromPath = Uploads.fileFromPath;\n(function (Groq) {\n  Groq.Completions = API.Completions;\n  Groq.Chat = API.Chat;\n  Groq.Embeddings = API.Embeddings;\n  Groq.Audio = API.Audio;\n  Groq.Models = API.Models;\n})(Groq || (Groq = {}));\nexport default Groq;","map":{"version":3,"names":["Errors","Uploads","Core","API","Groq","APIClient","constructor","baseURL","readEnv","apiKey","opts","undefined","GroqError","options","dangerouslyAllowBrowser","isRunningInBrowser","timeout","httpAgent","maxRetries","fetch","completions","Completions","chat","Chat","embeddings","Embeddings","audio","Audio","models","Models","_options","defaultQuery","defaultHeaders","authHeaders","Authorization","_a","DEFAULT_TIMEOUT","APIError","APIConnectionError","APIConnectionTimeoutError","APIUserAbortError","NotFoundError","ConflictError","RateLimitError","BadRequestError","AuthenticationError","InternalServerError","PermissionDeniedError","UnprocessableEntityError","toFile","fileFromPath"],"sources":["/Users/madhavmalik/VSC Projects/leetcoach/client/node_modules/groq-sdk/src/index.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Errors from './error';\nimport * as Uploads from './uploads';\nimport { type Agent } from './_shims/index';\nimport * as Core from './core';\nimport * as API from './resources/index';\n\nexport interface ClientOptions {\n  /**\n   * Defaults to process.env['GROQ_API_KEY'].\n   */\n  apiKey?: string | undefined;\n\n  /**\n   * Override the default base URL for the API, e.g., \"https://api.example.com/v2/\"\n   *\n   * Defaults to process.env['GROQ_BASE_URL'].\n   */\n  baseURL?: string | null | undefined;\n\n  /**\n   * The maximum amount of time (in milliseconds) that the client should wait for a response\n   * from the server before timing out a single request.\n   *\n   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait\n   * much longer than this timeout before the promise succeeds or fails.\n   */\n  timeout?: number;\n\n  /**\n   * An HTTP agent used to manage HTTP(S) connections.\n   *\n   * If not provided, an agent will be constructed by default in the Node.js environment,\n   * otherwise no agent is used.\n   */\n  httpAgent?: Agent;\n\n  /**\n   * Specify a custom `fetch` function implementation.\n   *\n   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is\n   * defined globally.\n   */\n  fetch?: Core.Fetch | undefined;\n\n  /**\n   * The maximum number of times that the client will retry a request in case of a\n   * temporary failure, like a network error or a 5XX error from the server.\n   *\n   * @default 2\n   */\n  maxRetries?: number;\n\n  /**\n   * Default headers to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * header to `undefined` or `null` in request options.\n   */\n  defaultHeaders?: Core.Headers;\n\n  /**\n   * Default query parameters to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * param to `undefined` in request options.\n   */\n  defaultQuery?: Core.DefaultQuery;\n\n  /**\n   * By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   * Only set this option to `true` if you understand the risks and have appropriate mitigations in place.\n   */\n  dangerouslyAllowBrowser?: boolean;\n}\n\n/**\n * API Client for interfacing with the Groq API.\n */\nexport class Groq extends Core.APIClient {\n  apiKey: string;\n\n  private _options: ClientOptions;\n\n  /**\n   * API Client for interfacing with the Groq API.\n   *\n   * @param {string | undefined} [opts.apiKey=process.env['GROQ_API_KEY'] ?? undefined]\n   * @param {string} [opts.baseURL=process.env['GROQ_BASE_URL'] ?? https://api.groq.com] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = Core.readEnv('GROQ_BASE_URL'),\n    apiKey = Core.readEnv('GROQ_API_KEY'),\n    ...opts\n  }: ClientOptions = {}) {\n    if (apiKey === undefined) {\n      throw new Errors.GroqError(\n        \"The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' }).\",\n      );\n    }\n\n    const options: ClientOptions = {\n      apiKey,\n      ...opts,\n      baseURL: baseURL || `https://api.groq.com`,\n    };\n\n    if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\n      throw new Errors.GroqError(\n        \"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew Groq({ apiKey, dangerouslyAllowBrowser: true })\",\n      );\n    }\n\n    super({\n      baseURL: options.baseURL!,\n      timeout: options.timeout ?? 60000 /* 1 minute */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch,\n    });\n\n    this._options = options;\n\n    this.apiKey = apiKey;\n  }\n\n  completions: API.Completions = new API.Completions(this);\n  chat: API.Chat = new API.Chat(this);\n  embeddings: API.Embeddings = new API.Embeddings(this);\n  audio: API.Audio = new API.Audio(this);\n  models: API.Models = new API.Models(this);\n\n  protected override defaultQuery(): Core.DefaultQuery | undefined {\n    return this._options.defaultQuery;\n  }\n\n  protected override defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return {\n      ...super.defaultHeaders(opts),\n      ...this._options.defaultHeaders,\n    };\n  }\n\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return { Authorization: `Bearer ${this.apiKey}` };\n  }\n\n  static Groq = this;\n  static DEFAULT_TIMEOUT = 60000; // 1 minute\n\n  static GroqError = Errors.GroqError;\n  static APIError = Errors.APIError;\n  static APIConnectionError = Errors.APIConnectionError;\n  static APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\n  static APIUserAbortError = Errors.APIUserAbortError;\n  static NotFoundError = Errors.NotFoundError;\n  static ConflictError = Errors.ConflictError;\n  static RateLimitError = Errors.RateLimitError;\n  static BadRequestError = Errors.BadRequestError;\n  static AuthenticationError = Errors.AuthenticationError;\n  static InternalServerError = Errors.InternalServerError;\n  static PermissionDeniedError = Errors.PermissionDeniedError;\n  static UnprocessableEntityError = Errors.UnprocessableEntityError;\n\n  static toFile = Uploads.toFile;\n  static fileFromPath = Uploads.fileFromPath;\n}\n\nexport const {\n  GroqError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BadRequestError,\n  AuthenticationError,\n  InternalServerError,\n  PermissionDeniedError,\n  UnprocessableEntityError,\n} = Errors;\n\nexport import toFile = Uploads.toFile;\nexport import fileFromPath = Uploads.fileFromPath;\n\nexport namespace Groq {\n  export import RequestOptions = Core.RequestOptions;\n\n  export import Completions = API.Completions;\n  export import CompletionUsage = API.CompletionUsage;\n\n  export import Chat = API.Chat;\n\n  export import Embeddings = API.Embeddings;\n  export import CreateEmbeddingResponse = API.CreateEmbeddingResponse;\n  export import Embedding = API.Embedding;\n  export import EmbeddingCreateParams = API.EmbeddingCreateParams;\n\n  export import Audio = API.Audio;\n\n  export import Models = API.Models;\n  export import Model = API.Model;\n  export import ModelDeleted = API.ModelDeleted;\n  export import ModelListResponse = API.ModelListResponse;\n\n  export import ErrorObject = API.ErrorObject;\n  export import FunctionDefinition = API.FunctionDefinition;\n  export import FunctionParameters = API.FunctionParameters;\n}\n\nexport default Groq;\n"],"mappings":"AAAA;;OAEO,KAAKA,MAAM;OACX,KAAKC,OAAO;OAEZ,KAAKC,IAAI;OACT,KAAKC,GAAG;AAuEf;;;AAGA,OAAM,MAAOC,IAAK,SAAQF,IAAI,CAACG,SAAS;EAKtC;;;;;;;;;;;;;EAaAC,YAAY;IACVC,OAAO,GAAGL,IAAI,CAACM,OAAO,CAAC,eAAe,CAAC;IACvCC,MAAM,GAAGP,IAAI,CAACM,OAAO,CAAC,cAAc,CAAC;IACrC,GAAGE;EAAI,IACU,EAAE;IACnB,IAAID,MAAM,KAAKE,SAAS,EAAE;MACxB,MAAM,IAAIX,MAAM,CAACY,SAAS,CACxB,8KAA8K,CAC/K;;IAGH,MAAMC,OAAO,GAAkB;MAC7BJ,MAAM;MACN,GAAGC,IAAI;MACPH,OAAO,EAAEA,OAAO,IAAI;KACrB;IAED,IAAI,CAACM,OAAO,CAACC,uBAAuB,IAAIZ,IAAI,CAACa,kBAAkB,EAAE,EAAE;MACjE,MAAM,IAAIf,MAAM,CAACY,SAAS,CACxB,8VAA8V,CAC/V;;IAGH,KAAK,CAAC;MACJL,OAAO,EAAEM,OAAO,CAACN,OAAQ;MACzBS,OAAO,EAAEH,OAAO,CAACG,OAAO,IAAI,KAAK,CAAC;MAClCC,SAAS,EAAEJ,OAAO,CAACI,SAAS;MAC5BC,UAAU,EAAEL,OAAO,CAACK,UAAU;MAC9BC,KAAK,EAAEN,OAAO,CAACM;KAChB,CAAC;IAOJ,KAAAC,WAAW,GAAoB,IAAIjB,GAAG,CAACkB,WAAW,CAAC,IAAI,CAAC;IACxD,KAAAC,IAAI,GAAa,IAAInB,GAAG,CAACoB,IAAI,CAAC,IAAI,CAAC;IACnC,KAAAC,UAAU,GAAmB,IAAIrB,GAAG,CAACsB,UAAU,CAAC,IAAI,CAAC;IACrD,KAAAC,KAAK,GAAc,IAAIvB,GAAG,CAACwB,KAAK,CAAC,IAAI,CAAC;IACtC,KAAAC,MAAM,GAAe,IAAIzB,GAAG,CAAC0B,MAAM,CAAC,IAAI,CAAC;IATvC,IAAI,CAACC,QAAQ,GAAGjB,OAAO;IAEvB,IAAI,CAACJ,MAAM,GAAGA,MAAM;EACtB;EAQmBsB,YAAYA,CAAA;IAC7B,OAAO,IAAI,CAACD,QAAQ,CAACC,YAAY;EACnC;EAEmBC,cAAcA,CAACtB,IAA8B;IAC9D,OAAO;MACL,GAAG,KAAK,CAACsB,cAAc,CAACtB,IAAI,CAAC;MAC7B,GAAG,IAAI,CAACoB,QAAQ,CAACE;KAClB;EACH;EAEmBC,WAAWA,CAACvB,IAA8B;IAC3D,OAAO;MAAEwB,aAAa,EAAE,UAAU,IAAI,CAACzB,MAAM;IAAE,CAAE;EACnD;;;AAEOL,IAAA,CAAAA,IAAI,GAAG+B,EAAI;AACX/B,IAAA,CAAAgC,eAAe,GAAG,KAAK,CAAC,CAAC;AAEzBhC,IAAA,CAAAQ,SAAS,GAAGZ,MAAM,CAACY,SAAS;AAC5BR,IAAA,CAAAiC,QAAQ,GAAGrC,MAAM,CAACqC,QAAQ;AAC1BjC,IAAA,CAAAkC,kBAAkB,GAAGtC,MAAM,CAACsC,kBAAkB;AAC9ClC,IAAA,CAAAmC,yBAAyB,GAAGvC,MAAM,CAACuC,yBAAyB;AAC5DnC,IAAA,CAAAoC,iBAAiB,GAAGxC,MAAM,CAACwC,iBAAiB;AAC5CpC,IAAA,CAAAqC,aAAa,GAAGzC,MAAM,CAACyC,aAAa;AACpCrC,IAAA,CAAAsC,aAAa,GAAG1C,MAAM,CAAC0C,aAAa;AACpCtC,IAAA,CAAAuC,cAAc,GAAG3C,MAAM,CAAC2C,cAAc;AACtCvC,IAAA,CAAAwC,eAAe,GAAG5C,MAAM,CAAC4C,eAAe;AACxCxC,IAAA,CAAAyC,mBAAmB,GAAG7C,MAAM,CAAC6C,mBAAmB;AAChDzC,IAAA,CAAA0C,mBAAmB,GAAG9C,MAAM,CAAC8C,mBAAmB;AAChD1C,IAAA,CAAA2C,qBAAqB,GAAG/C,MAAM,CAAC+C,qBAAqB;AACpD3C,IAAA,CAAA4C,wBAAwB,GAAGhD,MAAM,CAACgD,wBAAwB;AAE1D5C,IAAA,CAAA6C,MAAM,GAAGhD,OAAO,CAACgD,MAAM;AACvB7C,IAAA,CAAA8C,YAAY,GAAGjD,OAAO,CAACiD,YAAY;AAG5C,OAAO,MAAM;EACXtC,SAAS;EACTyB,QAAQ;EACRC,kBAAkB;EAClBC,yBAAyB;EACzBC,iBAAiB;EACjBC,aAAa;EACbC,aAAa;EACbC,cAAc;EACdC,eAAe;EACfC,mBAAmB;EACnBC,mBAAmB;EACnBC,qBAAqB;EACrBC;AAAwB,CACzB,GAAGhD,MAAM;AAEV,OAAM,IAAQiD,MAAM,GAAGhD,OAAO,CAACgD,MAAM;AACrC,OAAM,IAAQC,YAAY,GAAGjD,OAAO,CAACiD,YAAY;AAEjD,WAAiB9C,IAAI;EAGLA,IAAA,CAAAiB,WAAW,GAAGlB,GAAG,CAACkB,WAAW;EAG7BjB,IAAA,CAAAmB,IAAI,GAAGpB,GAAG,CAACoB,IAAI;EAEfnB,IAAA,CAAAqB,UAAU,GAAGtB,GAAG,CAACsB,UAAU;EAK3BrB,IAAA,CAAAuB,KAAK,GAAGxB,GAAG,CAACwB,KAAK;EAEjBvB,IAAA,CAAAyB,MAAM,GAAG1B,GAAG,CAAC0B,MAAM;AAQnC,CAAC,EAvBgBzB,IAAI,KAAJA,IAAI;AAyBrB,eAAeA,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}