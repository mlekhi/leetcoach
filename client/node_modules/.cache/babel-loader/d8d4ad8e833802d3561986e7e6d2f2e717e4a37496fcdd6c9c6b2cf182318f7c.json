{"ast":null,"code":"// src/InterviewQuestionsPage.js\nimport React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const questions=[{problem_name:\"Duplicate Integer\",difficulty:\"Easy\",examples:[{input:\"nums = [1, 2, 3, 3]\",output:\"true\"},{input:\"nums = [1, 2, 3, 4]\",output:\"false\"}],constraints:\"None provided\",solution:`class Solution:\n    def hasDuplicate(self, nums: List[int]) -> bool:\n        hashset = set()\n        for n in nums:\n            if n in hashset:\n                return True\n            hashset.add(n)\n        return False`},{problem_name:\"Is Anagram\",difficulty:\"Easy\",examples:[{input:\"s = \\\"racecar\\\", t = \\\"carrace\\\"\",output:\"true\"},{input:\"s = \\\"jar\\\", t = \\\"jam\\\"\",output:\"false\"}],constraints:\"s and t consist of lowercase English letters.\",solution:`class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        countS, countT = {}, {}\n        for i in range(len(s)):\n            countS[s[i]] = 1 + countS.get(s[i], 0)\n            countT[t[i]] = 1 + countT.get(t[i], 0)\n        return countS == countT`}// Add other questions in similar format\n];const InterviewQuestionsPage=()=>{return/*#__PURE__*/_jsxs(\"div\",{className:\"container mx-auto p-4\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-center mb-6\",children:\"Interview Questions\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-6\",children:questions.map((q,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-6 rounded-lg shadow-md\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"text-xl font-semibold mb-2\",children:[q.problem_name,\" \",/*#__PURE__*/_jsxs(\"span\",{className:\"text-gray-500\",children:[\"(\",q.difficulty,\")\"]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold mt-4 mb-2\",children:\"Examples:\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"list-disc pl-5 space-y-2\",children:q.examples.map((ex,i)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{className:\"font-medium\",children:\"Input:\"}),\" \",ex.input,\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{className:\"font-medium\",children:\"Output:\"}),\" \",ex.output]},i))}),/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold mt-4 mb-2\",children:\"Constraints:\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-700\",children:q.constraints}),/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold mt-4 mb-2\",children:\"Solution:\"}),/*#__PURE__*/_jsx(\"pre\",{className:\"bg-gray-100 p-4 rounded-lg overflow-x-auto\",children:/*#__PURE__*/_jsx(\"code\",{className:\"text-sm text-gray-800\",children:q.solution})})]},index))})]});};export default InterviewQuestionsPage;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","questions","problem_name","difficulty","examples","input","output","constraints","solution","InterviewQuestionsPage","className","children","map","q","index","ex","i"],"sources":["/Users/madhavmalik/VSC Projects/leetcoach/client/src/pages/Question.js"],"sourcesContent":["// src/InterviewQuestionsPage.js\nimport React from 'react';\n\nconst questions = [\n  {\n    problem_name: \"Duplicate Integer\",\n    difficulty: \"Easy\",\n    examples: [\n      { input: \"nums = [1, 2, 3, 3]\", output: \"true\" },\n      { input: \"nums = [1, 2, 3, 4]\", output: \"false\" }\n    ],\n    constraints: \"None provided\",\n    solution: `class Solution:\n    def hasDuplicate(self, nums: List[int]) -> bool:\n        hashset = set()\n        for n in nums:\n            if n in hashset:\n                return True\n            hashset.add(n)\n        return False`\n  },\n  {\n    problem_name: \"Is Anagram\",\n    difficulty: \"Easy\",\n    examples: [\n      { input: \"s = \\\"racecar\\\", t = \\\"carrace\\\"\", output: \"true\" },\n      { input: \"s = \\\"jar\\\", t = \\\"jam\\\"\", output: \"false\" }\n    ],\n    constraints: \"s and t consist of lowercase English letters.\",\n    solution: `class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        countS, countT = {}, {}\n        for i in range(len(s)):\n            countS[s[i]] = 1 + countS.get(s[i], 0)\n            countT[t[i]] = 1 + countT.get(t[i], 0)\n        return countS == countT`\n  },\n  // Add other questions in similar format\n];\n\nconst InterviewQuestionsPage = () => {\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold text-center mb-6\">Interview Questions</h1>\n      <div className=\"space-y-6\">\n        {questions.map((q, index) => (\n          <div key={index} className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-2\">\n              {q.problem_name} <span className=\"text-gray-500\">({q.difficulty})</span>\n            </h2>\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">Examples:</h3>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              {q.examples.map((ex, i) => (\n                <li key={i}>\n                  <strong className=\"font-medium\">Input:</strong> {ex.input} <br />\n                  <strong className=\"font-medium\">Output:</strong> {ex.output}\n                </li>\n              ))}\n            </ul>\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">Constraints:</h3>\n            <p className=\"text-gray-700\">{q.constraints}</p>\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">Solution:</h3>\n            <pre className=\"bg-gray-100 p-4 rounded-lg overflow-x-auto\">\n              <code className=\"text-sm text-gray-800\">{q.solution}</code>\n            </pre>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default InterviewQuestionsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}