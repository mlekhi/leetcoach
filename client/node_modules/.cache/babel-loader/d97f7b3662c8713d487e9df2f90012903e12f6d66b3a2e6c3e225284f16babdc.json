{"ast":null,"code":"var _jsxFileName = \"/Users/mlekhi/leetcoach/client/src/pages/AudioWave.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioWave = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createAnalyser();\n    const microphone = audioCtx.createMediaStreamSource(navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => stream));\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    microphone.connect(analyser);\n    const draw = () => {\n      requestAnimationFrame(draw);\n      analyser.getByteFrequencyData(dataArray);\n      ctx.clearRect(0, 0, WIDTH, HEIGHT);\n      const barWidth = WIDTH / bufferLength * 2.5;\n      let barHeight;\n      let x = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n        ctx.fillRect(x, HEIGHT - barHeight / 2, barWidth, barHeight / 2);\n        x += barWidth + 1;\n      }\n    };\n    draw();\n    return () => {\n      audioCtx.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: \"300\",\n    height: \"150\",\n    style: {\n      border: '1px solid #fff',\n      borderRadius: '4px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioWave, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = AudioWave;\nexport default AudioWave;\nvar _c;\n$RefreshReg$(_c, \"AudioWave\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","AudioWave","_s","canvasRef","canvas","current","ctx","getContext","WIDTH","width","HEIGHT","height","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","microphone","createMediaStreamSource","navigator","mediaDevices","getUserMedia","audio","then","stream","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","connect","draw","requestAnimationFrame","getByteFrequencyData","clearRect","barWidth","barHeight","x","i","fillStyle","fillRect","close","ref","style","border","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mlekhi/leetcoach/client/src/pages/AudioWave.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst AudioWave = () => {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const WIDTH = canvas.width;\n        const HEIGHT = canvas.height;\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        const analyser = audioCtx.createAnalyser();\n        const microphone = audioCtx.createMediaStreamSource(navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => stream));\n        analyser.fftSize = 256;\n        const bufferLength = analyser.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n\n        microphone.connect(analyser);\n\n        const draw = () => {\n            requestAnimationFrame(draw);\n            analyser.getByteFrequencyData(dataArray);\n\n            ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n            const barWidth = (WIDTH / bufferLength) * 2.5;\n            let barHeight;\n            let x = 0;\n\n            for (let i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i];\n                ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n                ctx.fillRect(x, HEIGHT - barHeight / 2, barWidth, barHeight / 2);\n                x += barWidth + 1;\n            }\n        };\n\n        draw();\n\n        return () => {\n            audioCtx.close();\n        };\n    }, []);\n\n    return (\n        <canvas\n            ref={canvasRef}\n            width=\"300\"\n            height=\"150\"\n            style={{ border: '1px solid #fff', borderRadius: '4px' }}\n        />\n    );\n};\n\nexport default AudioWave;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,SAAS,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMO,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMC,KAAK,GAAGJ,MAAM,CAACK,KAAK;IAC1B,MAAMC,MAAM,GAAGN,MAAM,CAACO,MAAM;IAC5B,MAAMC,QAAQ,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IACzE,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,cAAc,CAAC,CAAC;IAC1C,MAAMC,UAAU,GAAGN,QAAQ,CAACO,uBAAuB,CAACC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAC,CAAC;IAChIT,QAAQ,CAACU,OAAO,GAAG,GAAG;IACtB,MAAMC,YAAY,GAAGX,QAAQ,CAACY,iBAAiB;IAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;IAE9CT,UAAU,CAACa,OAAO,CAACf,QAAQ,CAAC;IAE5B,MAAMgB,IAAI,GAAGA,CAAA,KAAM;MACfC,qBAAqB,CAACD,IAAI,CAAC;MAC3BhB,QAAQ,CAACkB,oBAAoB,CAACL,SAAS,CAAC;MAExCvB,GAAG,CAAC6B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE3B,KAAK,EAAEE,MAAM,CAAC;MAElC,MAAM0B,QAAQ,GAAI5B,KAAK,GAAGmB,YAAY,GAAI,GAAG;MAC7C,IAAIU,SAAS;MACb,IAAIC,CAAC,GAAG,CAAC;MAET,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,YAAY,EAAEY,CAAC,EAAE,EAAE;QACnCF,SAAS,GAAGR,SAAS,CAACU,CAAC,CAAC;QACxBjC,GAAG,CAACkC,SAAS,GAAG,0BAA0B;QAC1ClC,GAAG,CAACmC,QAAQ,CAACH,CAAC,EAAE5B,MAAM,GAAG2B,SAAS,GAAG,CAAC,EAAED,QAAQ,EAAEC,SAAS,GAAG,CAAC,CAAC;QAChEC,CAAC,IAAIF,QAAQ,GAAG,CAAC;MACrB;IACJ,CAAC;IAEDJ,IAAI,CAAC,CAAC;IAEN,OAAO,MAAM;MACTpB,QAAQ,CAAC8B,KAAK,CAAC,CAAC;IACpB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI1C,OAAA;IACI2C,GAAG,EAAExC,SAAU;IACfM,KAAK,EAAC,KAAK;IACXE,MAAM,EAAC,KAAK;IACZiC,KAAK,EAAE;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,YAAY,EAAE;IAAM;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV,CAAC;AAAChD,EAAA,CAlDID,SAAS;AAAAkD,EAAA,GAATlD,SAAS;AAoDf,eAAeA,SAAS;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}