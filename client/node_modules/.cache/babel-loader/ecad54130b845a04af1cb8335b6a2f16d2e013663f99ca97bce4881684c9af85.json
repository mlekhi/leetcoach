{"ast":null,"code":"var _jsxFileName = \"/Users/mlekhi/leetcoach/client/src/pages/Question.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questions = [{\n  problem_name: \"Duplicate Integer\",\n  difficulty: \"Easy\",\n  examples: [{\n    input: \"nums = [1, 2, 3, 3]\",\n    output: \"true\"\n  }, {\n    input: \"nums = [1, 2, 3, 4]\",\n    output: \"false\"\n  }],\n  constraints: \"None provided\",\n  solution: `class Solution:\n      def hasDuplicate(self, nums: List[int]) -> bool:\n          hashset = set()\n          for n in nums:\n              if n in hashset:\n                  return True\n              hashset.add(n)\n          return False`\n}, {\n  problem_name: \"Is Anagram\",\n  difficulty: \"Easy\",\n  examples: [{\n    input: \"s = \\\"racecar\\\", t = \\\"carrace\\\"\",\n    output: \"true\"\n  }, {\n    input: \"s = \\\"jar\\\", t = \\\"jam\\\"\",\n    output: \"false\"\n  }],\n  constraints: \"s and t consist of lowercase English letters.\",\n  solution: `class Solution:\n      def isAnagram(self, s: str, t: str) -> bool:\n          if len(s) != len(t):\n              return False\n          countS, countT = {}, {}\n          for i in range(len(s)):\n              countS[s[i]] = 1 + countS.get(s[i], 0)\n              countT[t[i]] = 1 + countT.get(t[i], 0)\n          return countS == countT`\n}\n// Add other questions in similar format\n];\nconst InterviewQuestionsPage = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions-list\",\n      children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [q.problem_name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"difficulty\",\n            children: [\"(\", q.difficulty, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Examples:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: q.examples.map((ex, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Input:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 21\n            }, this), \" \", ex.input, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 56\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Output:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 21\n            }, this), \" \", ex.output]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Constraints:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: q.constraints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Solution:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: q.solution\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n_c = InterviewQuestionsPage;\nexport default InterviewQuestionsPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewQuestionsPage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","questions","problem_name","difficulty","examples","input","output","constraints","solution","InterviewQuestionsPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","q","index","ex","i","_c","$RefreshReg$"],"sources":["/Users/mlekhi/leetcoach/client/src/pages/Question.js"],"sourcesContent":["import React from 'react';\n\nconst questions = [\n    {\n      problem_name: \"Duplicate Integer\",\n      difficulty: \"Easy\",\n      examples: [\n        { input: \"nums = [1, 2, 3, 3]\", output: \"true\" },\n        { input: \"nums = [1, 2, 3, 4]\", output: \"false\" }\n      ],\n      constraints: \"None provided\",\n      solution: `class Solution:\n      def hasDuplicate(self, nums: List[int]) -> bool:\n          hashset = set()\n          for n in nums:\n              if n in hashset:\n                  return True\n              hashset.add(n)\n          return False`\n    },\n    {\n      problem_name: \"Is Anagram\",\n      difficulty: \"Easy\",\n      examples: [\n        { input: \"s = \\\"racecar\\\", t = \\\"carrace\\\"\", output: \"true\" },\n        { input: \"s = \\\"jar\\\", t = \\\"jam\\\"\", output: \"false\" }\n      ],\n      constraints: \"s and t consist of lowercase English letters.\",\n      solution: `class Solution:\n      def isAnagram(self, s: str, t: str) -> bool:\n          if len(s) != len(t):\n              return False\n          countS, countT = {}, {}\n          for i in range(len(s)):\n              countS[s[i]] = 1 + countS.get(s[i], 0)\n              countT[t[i]] = 1 + countT.get(t[i], 0)\n          return countS == countT`\n    },\n    // Add other questions in similar format\n  ];\n  \n  const InterviewQuestionsPage = () => {\n    return (\n      <div className=\"container\">\n        <h1>Interview Questions</h1>\n        <div className=\"questions-list\">\n          {questions.map((q, index) => (\n            <div key={index} className=\"question\">\n              <h2>{q.problem_name} <span className=\"difficulty\">({q.difficulty})</span></h2>\n              <h3>Examples:</h3>\n              <ul>\n                {q.examples.map((ex, i) => (\n                  <li key={i}>\n                    <strong>Input:</strong> {ex.input} <br />\n                    <strong>Output:</strong> {ex.output}\n                  </li>\n                ))}\n              </ul>\n              <h3>Constraints:</h3>\n              <p>{q.constraints}</p>\n              <h3>Solution:</h3>\n              <pre><code>{q.solution}</code></pre>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  export default InterviewQuestionsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}